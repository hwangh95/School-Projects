// Huidong Hwang
// 10/30/16
// Computes the 0-1 knapsack problem

import java.io.*;
import java.util.*;

/*
Choices: 

Final value:
11528785

*/
public class knapsack
{
    public static void main(String[] args) throws Exception
    {
        Scanner cin = new Scanner(new File("hw3_data"));
        String[] numbers = cin.nextLine().split(" ");
        int n = Integer.parseInt(numbers[0]);
        int w = Integer.parseInt(numbers[1]);

        int[][] data = new int[n][w];
        int[] weights = new int[n];
        int[] vals = new int[n];

        int count = 0;
        while (cin.hasNextLine()){
            String[] entry = cin.nextLine().split(" ");
            weights[count] = Integer.parseInt(entry[1]);
            vals[count++] = Integer.parseInt(entry[2]);
        }
        for (int i = 1; i<n;i++)
        {
            for (int j = 0; j<w;j++)
            {
                if (weights[i]>j)
                {
                    data[i][j] = data[i-1][j];
                }
                else
                {
                    data[i][j] = Math.max(data[i-1][j],data[i-1][j-weights[i]]+vals[i]);
                }
            }
        }
        String choices = "";
        for (int i = n-1; i >0; i--)
        {
            if (data[i][w-1] - data[i-1][w-1-weights[i]] == vals[i])
            {
                choices += vals[i] + " ";
            }
        }
        System.out.println(choices+"\n"+data[n-1][w-1]);
        
    }
}
